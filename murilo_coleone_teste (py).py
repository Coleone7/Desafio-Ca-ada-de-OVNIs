# -*- coding: utf-8 -*-
"""Murilo_Coleone_Teste.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m-YUkw_2W0R6pzGLrNzWQG6sIVTmKE6o
"""

# Desafio: Caçada de OVNIs
# Usando o dataset ovnis.json responda as seguintes perguntas:

# https://drive.google.com/file/d/1YT9p45iT18FTfV4zou4nBZKvneExRNM_/view?usp=sharing

# Quais os 5 formatos de OVNI mais comuns nos relatos?

# Qual o horário mais difícil para avistarmos um OVNI em forma de Charuto?

# Qual o estado com mais aparição de ovni?

# /content/drive/MyDrive/Colab Notebooks/teste scafold/ovnis.json

# Irei tansformar o JSON em um dataframe, pois acho mais fácil de trabalhar assim.

import pandas as pd
ovni_df = pd.read_json("/content/drive/MyDrive/Colab Notebooks/teste scafold/ovnis.json")
ovni_df.head()

# Imprimi o as informaçoes do dataframe para poder avaliar quantas linhas tenho de informação em cada coluna 
# E qual o tipo de data type que tenho em cada coluna.
ovni_df.info()

# Imprimi também a descrição da dataframe para caso seja necessário na análise.
ovni_df.describe()

#Irei começar na ordem das perguntas. 

#Quais os 5 formatos de OVNI mais comuns nos relatos?

## Para obter essa esposta, eu irei contar a quantidade de repetições das informações da coluna 'Shape'. que é Formato em inglês.
## Utilizarei a função "value_counts()" para determinar o que mais se repete.



### Resposta: De acordo com a análise,  os 5 formatos de OVNI mais comuns nos relatos são: 
# 1º Light (formato de luz) com 18152 aparições.
# 2º Circle (formato de circulo) com 10077 aparições.
# 3º Triangle (formato de triangulo) com 7857 aparições.
# 4º Fireball (formato de bola de fogo) com 7071 aparições.
# 5º Unknown (formato desconhecido) com 6152 aparições.



teste = ovni_df['shape'].value_counts()

teste

# Para melhorar a vizualização das informações acima, podemos imprimir um gráfico de barras simples para verificar.

ovni_df['shape'].value_counts().plot(kind='bar', figsize = (12,6), xlabel=('Número de Ocorrência'), ylabel=('Formato'), color='red', fontsize= 20)

# Qual o horário mais difícil para avistarmos um OVNI em forma de Charuto?

# Para essa análise, irei primeiro separar a coluna "occured" em duas novas colunas, occured_date (data ocorrida) e occured_hour (hora ocorrida) -
# - para termos análisarmos em cima das horas do aparecimento, já que estamos procurando a menor frequência do aparecimento dos OVNI's de formato de charuto.
# Irei usar a função de split para separar as informações da colula "occured" em duas.
# Retirarei a coluna 'occured' para não haver duplicidade de informação na dataframe.

ovni_df['occured'][0::87593] # Exemplo de linhas com preenchimento de data+hora e somente data.

ovni_df["occured"].str.split(expand = True) # Sem problemas com o tratamento para as colunas sem hora.

ovni_df[["occured_date","occured_hour"]] = ovni_df["occured"].str.split(expand = True) # alterei o nome das duas novas columas para occured_date (data ocorrida) e occured_hour (hora ocorrida).

ovni_df.head()
# A nova dataframe tem agora, separadamente as informações de Data e Hora do evento ocorrudo no final da tabela.

ovni_df = ovni_df.drop(columns=['occured']) # Achei redundancia reter a coluna 'ocured' então removi a mesma para não ter duplicidade de informação na dataframe.
ovni_df.head()

# Filtrei somente as aparições de ovnis com o formato de charuto e seus horarios criando um novo dataframe somente com a coluna shape(formato) e occured_hour(hora ocorrida)

ovni_shape_hour = ovni_df[['shape','occured_hour']]
ovni_shape_hour.head()

# Em seguida, irei criar uma dataframe com o filtro "Cigar" na coluna "shape" para imprimir somente as aparições de formato de Charuto.
# No levantamento de informações da primeira questão, existiam 1981 resultados para "Cigar" no agrupamento, logo, esse é o numero que eu devo conseguir.

ovni_cigar_hour = ovni_shape_hour[ovni_shape_hour['shape'] == 'Cigar']

ovni_cigar_hour

# Para encontrar a hora em que a frequência do formato charuto é menor, irei agrupar todas as linhas por HORA. 
# Então, para utilizar a função do agrupamento por hora, preciso que o data type da coluna "occured_hour" seja "datetime64"

ovni_cigar_hour['occured_hour'] = ovni_cigar_hour['occured_hour'].astype('datetime64') #alteração do datatype da coluna "occured_hour" para "datetime64"

ovni_cigar_hour.info()

# Realizei a impressão do dataframe para verificar.
# A transformação traz data, por padrão deixei a data atual para que possa ser agrupado com mais facilidade.

ovni_cigar_hour.head(10)

# Realizei o agrupamento por hora da coluna "occured_hour" por hora. 

agrupamento_hora = ovni_cigar_hour.groupby([ovni_cigar_hour['occured_hour'].dt.to_period('H'), 'shape']).count().unstack()

agrupamento_hora

# No dataframe impresso, temos a frequência dos aparecimentos agrupados hora a hora.

# Para melhorar a vizualização da tabela acima, ordenei as informações e imprimi uma gráfico de barras para melhor vizualização.
# Podemos notar já que a hora com menos aparições de ovnis com formato de charuto é as 03:00 da manhã.

agrupamento_hora.columns = agrupamento_hora.columns.droplevel()
agrupamento_hora.sort_values(by="Cigar").plot(kind='bar', figsize = (12,6), xlabel=('Agrupamento de ocorrencia por hora'), ylabel=('Quantidade de aparições ocorridas por hora'))

agrupamento_hora.sort_values(by="Cigar") #ordenação dos valores.

# Ordenando a dataframe, podemos identificar que a menor incidencia de aparecimento dele é as 03:00 da manhã, assim como mostra o gráfico.

### Resposta: O horário mais difícil para avistarmos um OVNI em forma de Charuto é as 03:00 da manhã (entre as 03:00 e 03:59) com apenas 29 aparições no total nesse horario.

# Qual o estado com mais aparição de ovnis?
# Para responder essa pergunta, irei realizar uma contagem na coluna "state".


### Resposta: o estado com mais aparição de ovnis é o estado da california com 9473 aparições.
### Seguido do estado da Florida com 5260, Washington com 3830, Texas com 3458 e Nova Yorke com 3406 aparições.

ovni_df['state'].value_counts().head(10)

# Para melhor vizualização, imprimi aqui um gráfico com os 10 estados com mais aparições para concluir a análise.

ovni_df['state'].value_counts().sort_values(ascending=False)[:10].plot(kind='bar', figsize = (12,6), xlabel=('Sigla Estado'), ylabel=('Quantidade de Ocorrência'), color='green', rot=1, fontsize = 15)